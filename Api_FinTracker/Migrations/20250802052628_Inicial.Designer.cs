// <auto-generated />
using System;
using Api_FinTracker.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Api_FinTracker.Migrations
{
    [DbContext(typeof(Contexto))]
    [Migration("20250802052628_Inicial")]
    partial class Inicial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.6");

            modelBuilder.Entity("Data.Models.Categoria", b =>
                {
                    b.Property<int>("categoriaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("colorFondo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("icono")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("tipo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("usuarioId")
                        .HasColumnType("INTEGER");

                    b.HasKey("categoriaId");

                    b.HasIndex("usuarioId");

                    b.ToTable("Categoria");
                });

            modelBuilder.Entity("Data.Models.LimiteGasto", b =>
                {
                    b.Property<int>("limiteGastoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("categoriaId")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("gastadoActual")
                        .HasColumnType("REAL");

                    b.Property<double>("montoLimite")
                        .HasColumnType("REAL");

                    b.Property<string>("periodo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("usuarioId")
                        .HasColumnType("INTEGER");

                    b.HasKey("limiteGastoId");

                    b.HasIndex("categoriaId");

                    b.HasIndex("usuarioId");

                    b.ToTable("LimiteGasto");
                });

            modelBuilder.Entity("Data.Models.MetaAhorro", b =>
                {
                    b.Property<int>("metaAhorroId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double?>("contribucionRecurrente")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("fechaFinalizacion")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("fechaMontoAhorrado")
                        .HasColumnType("TEXT");

                    b.Property<string>("imagen")
                        .HasColumnType("TEXT");

                    b.Property<double?>("montoActual")
                        .HasColumnType("REAL");

                    b.Property<double?>("montoAhorrado")
                        .HasColumnType("REAL");

                    b.Property<double>("montoObjetivo")
                        .HasColumnType("REAL");

                    b.Property<string>("nombreMeta")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("usuarioId")
                        .HasColumnType("INTEGER");

                    b.HasKey("metaAhorroId");

                    b.HasIndex("usuarioId");

                    b.ToTable("MetaAhorro");
                });

            modelBuilder.Entity("Data.Models.PagoRecurrente", b =>
                {
                    b.Property<int>("pagoRecurrenteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("activo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("categoriaId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("fechaFin")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("fechaInicio")
                        .HasColumnType("TEXT");

                    b.Property<string>("frecuencia")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("monto")
                        .HasColumnType("REAL");

                    b.Property<int?>("usuarioId")
                        .HasColumnType("INTEGER");

                    b.HasKey("pagoRecurrenteId");

                    b.HasIndex("categoriaId");

                    b.HasIndex("usuarioId");

                    b.ToTable("PagoRecurrente");
                });

            modelBuilder.Entity("Data.Models.Transaccion", b =>
                {
                    b.Property<int>("transaccionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("categoriaId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("fecha")
                        .HasColumnType("TEXT");

                    b.Property<double>("monto")
                        .HasColumnType("REAL");

                    b.Property<string>("notas")
                        .HasColumnType("TEXT");

                    b.Property<string>("tipo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("usuarioId")
                        .HasColumnType("INTEGER");

                    b.HasKey("transaccionId");

                    b.HasIndex("categoriaId");

                    b.HasIndex("usuarioId");

                    b.ToTable("Transaccion");
                });

            modelBuilder.Entity("Data.Models.Usuario", b =>
                {
                    b.Property<int>("usuarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("apellido")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("contraseña")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("divisa")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("fotoPerfil")
                        .HasColumnType("TEXT");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("saldoTotal")
                        .HasColumnType("REAL");

                    b.HasKey("usuarioId");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("Data.Models.Categoria", b =>
                {
                    b.HasOne("Data.Models.Usuario", "usuario")
                        .WithMany("Categorias")
                        .HasForeignKey("usuarioId");

                    b.Navigation("usuario");
                });

            modelBuilder.Entity("Data.Models.LimiteGasto", b =>
                {
                    b.HasOne("Data.Models.Categoria", "categoria")
                        .WithMany()
                        .HasForeignKey("categoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Usuario", "usuario")
                        .WithMany("LimiteGasto")
                        .HasForeignKey("usuarioId");

                    b.Navigation("categoria");

                    b.Navigation("usuario");
                });

            modelBuilder.Entity("Data.Models.MetaAhorro", b =>
                {
                    b.HasOne("Data.Models.Usuario", "usuario")
                        .WithMany("MetaAhorro")
                        .HasForeignKey("usuarioId");

                    b.Navigation("usuario");
                });

            modelBuilder.Entity("Data.Models.PagoRecurrente", b =>
                {
                    b.HasOne("Data.Models.Categoria", "categoria")
                        .WithMany()
                        .HasForeignKey("categoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Usuario", "usuario")
                        .WithMany("PagoRecurrente")
                        .HasForeignKey("usuarioId");

                    b.Navigation("categoria");

                    b.Navigation("usuario");
                });

            modelBuilder.Entity("Data.Models.Transaccion", b =>
                {
                    b.HasOne("Data.Models.Categoria", "categoria")
                        .WithMany()
                        .HasForeignKey("categoriaId");

                    b.HasOne("Data.Models.Usuario", "usuario")
                        .WithMany("Transaccion")
                        .HasForeignKey("usuarioId");

                    b.Navigation("categoria");

                    b.Navigation("usuario");
                });

            modelBuilder.Entity("Data.Models.Usuario", b =>
                {
                    b.Navigation("Categorias");

                    b.Navigation("LimiteGasto");

                    b.Navigation("MetaAhorro");

                    b.Navigation("PagoRecurrente");

                    b.Navigation("Transaccion");
                });
#pragma warning restore 612, 618
        }
    }
}
